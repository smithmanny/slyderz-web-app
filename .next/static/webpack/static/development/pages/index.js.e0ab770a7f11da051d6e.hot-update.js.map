{"version":3,"file":"static/webpack/static/development/pages/index.js.e0ab770a7f11da051d6e.hot-update.js","sources":["webpack:///./components/form/SignInForm.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik } from 'formik';\nimport { gql } from 'apollo-boost';\nimport { Mutation } from 'react-apollo';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport InputBase from '@material-ui/core/InputBase';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport EmailIcon from '@material-ui/icons/AlternateEmail';\nimport LockIcon from '@material-ui/icons/Lock';\nimport Typography from '@material-ui/core/Typography';\nimport Visibility from '@material-ui/icons/Visibility';\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport CloseIcon from '@material-ui/icons/Close';\n\nimport signInUserMutation from '../../lib/gql/mutation/signInUserMutation.gql';\n\nconst useStyles = theme => ({\n  divider: {\n    width: 1,\n    height: 28,\n    margin: 4,\n  },\n  hDivider: {\n    height: 1,\n    width: '100%',\n    margin: `${theme.spacing.unit * 2}px 0`,\n  },\n  root: {\n    padding: '2px 4px',\n    display: 'flex',\n    alignItems: 'center',\n  },\n  main: {\n    padding: '40px 24px',\n    maxWidth: 1032,\n    margin: 'auto',\n  },\n  noAccount: {\n    '&:hover': {\n      textDecoration: 'underline',\n    },\n  },\n  input: {\n    marginLeft: 8,\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n});\n\nconst SignInForm = ({ classes, handleClose, openSignUpModal }) => {\n  const [showPassword, setShowPassword] = React.useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  function handleClickShowPassword() {\n    setShowPassword(!showPassword);\n  }\n\n  function handleSnackbar(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  }\n\n  return (\n    <div>\n      <Divider className={classes.hDivider} />\n      <Mutation\n        mutation={signInUserMutation}\n        onCompleted={user => {\n          handleClose();\n        }}\n        onError={error => {\n          setOpen(true);\n        }}\n      >\n        {(createUser, { error }) => (\n          <Formik\n            validate={values => {\n              const errors = {};\n              if (!values.email) {\n                errors.email = 'Required';\n              } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n              }\n              return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n              createUser({\n                variables: {\n                  username: `${values.firstName}${values.lastName}`,\n                  firstName: values.firstName,\n                  lastName: values.lastName,\n                  email: values.email,\n                  password: values.password,\n                },\n              });\n              setSubmitting(false);\n            }}\n          >\n            {({ values, errors, handleChange, handleBlur, handleSubmit, isSubmitting }) => (\n              <form onSubmit={handleSubmit}>\n                <Grid container spacing={24}>\n                  <Grid item xs={12}>\n                    <Paper className={classes.root} elevation={1}>\n                      <IconButton className={classes.iconButton} aria-label=\"Email\">\n                        <EmailIcon />\n                      </IconButton>\n                      <Divider className={classes.divider} />\n\n                      <InputBase\n                        className={classes.input}\n                        placeholder=\"Email\"\n                        value={values.email}\n                        name=\"email\"\n                        onChange={handleChange}\n                        onBlur={handleBlur}\n                        type=\"email\"\n                        required\n                      />\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Paper className={classes.root} elevation={1}>\n                      <IconButton className={classes.iconButton} aria-label=\"Password\">\n                        <LockIcon />\n                      </IconButton>\n                      <Divider className={classes.divider} />\n\n                      <InputBase\n                        className={classes.input}\n                        placeholder=\"Create a Password\"\n                        value={values.password}\n                        name=\"password\"\n                        onBlur={handleBlur}\n                        onChange={handleChange}\n                        type={showPassword ? 'text' : 'password'}\n                        required\n                      />\n                      <IconButton aria-label=\"Toggle password visibility\" onClick={handleClickShowPassword}>\n                        {showPassword ? <Visibility /> : <VisibilityOff />}\n                      </IconButton>\n                    </Paper>\n                  </Grid>\n\n                  <Grid item xs={12}>\n                    <Button type=\"submit\" variant=\"contained\" color=\"secondary\" disabled={isSubmitting} fullWidth>\n                      Sign In\n                    </Button>\n                  </Grid>\n                  <Divider className={classes.hDivider} />\n\n                  <Grid item xs={12} md={6}>\n                    <Typography variant=\"subtitle1\">Forgot password?</Typography>\n                  </Grid>\n                  <Grid item xs={12} md={6}>\n                    <Typography\n                      variant=\"subtitle1\"\n                      align=\"right\"\n                      color=\"primary\"\n                      onClick={openSignUpModal}\n                      className={classes.noAccount}\n                    >\n                      Don't have an account?\n                    </Typography>\n                  </Grid>\n                </Grid>\n                <Snackbar\n                  anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                  }}\n                  open={open}\n                  autoHideDuration={3000}\n                  onClose={handleSnackbar}\n                  ContentProps={{\n                    'aria-describedby': 'message-id',\n                  }}\n                  message={<span id=\"message-id\">Error! :(</span>}\n                  action={[\n                    <IconButton\n                      key=\"close\"\n                      aria-label=\"Close\"\n                      color=\"inherit\"\n                      className={classes.close}\n                      onClick={handleSnackbar}\n                    >\n                      <CloseIcon />\n                    </IconButton>,\n                  ]}\n                />\n              </form>\n            )}\n          </Formik>\n        )}\n      </Mutation>\n    </div>\n  );\n};\n\nSignInForm.propTypes = {\n  classes: PropTypes.shape().isRequired,\n  openSignUpModal: PropTypes.func.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n\nexport default withStyles(useStyles)(SignInForm);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AADA;AADA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AApCA;AAAA;AACA;AA6CA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AADA;AASA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAapBA;AAAA;AAAA;AAAA;AAAA;AAAA;AApEA;AAxBA;AA2HA;AACA;AACA;AACA;AACA;AACA;AAHA;AAMA;;;;A","sourceRoot":""}