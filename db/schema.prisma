datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleType {
  ADMIN
  CHEF
  USER
}

model Address {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address1  String
  address2  String?
  city      String
  state     String
  zipcode   String

  user   AuthUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @unique
}

model AuthUser {
  id               String     @id @default(cuid())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  name             String
  email            String     @unique
  emailVerified    Boolean    @default(false)
  image            UserPhoto?
  stripeCustomerId String     @unique
  role             RoleType   @default(USER)

  address      Address?
  chef         Chef?
  orders       Order[]
  auth_session AuthSession[]
  auth_key     AuthKey[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model UserPhoto {
  id            String @id @unique @default(cuid())
  imageUrl      String
  imagePublicId String @unique

  user   AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)
  userId String   @unique
}

enum OnboardingState {
  SETUP_STRIPE
  UPLOAD_HEADSHOT
  COMPLETE_SERVSAFE
  ADD_PROFILE_DESCRIPTION
  DONE
}

model Chef {
  id                   String   @id @default(cuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  stripeAccountId      String
  isOnboardingComplete Boolean  @default(false)

  user            AuthUser        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  orders          Order[]
  dishes          Dish[]
  sections        Section[]
  hours           Hours[]
  onboardingState OnboardingState @default(SETUP_STRIPE)

  @@unique([userId])
}

enum DaysOfWeekTypeEnum {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

model Hours {
  id         String               @id @default(cuid())
  createdAt  DateTime             @default(now())
  updatedAt  DateTime             @updatedAt
  daysOfWeek DaysOfWeekTypeEnum[]
  startTime  String?
  endTime    String?

  chef   Chef   @relation(fields: [chefId], references: [id], onDelete: Cascade)
  chefId String
}

model Section {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique

  dishes Dish[]
  chef   Chef   @relation(fields: [chefId], references: [id], onDelete: Cascade)
  chefId String

  @@unique([name, chefId])
}

model DishPhoto {
  id            String @id @unique @default(cuid())
  imageUrl      String
  imagePublicId String @unique

  dish   Dish?   @relation(fields: [dishId], references: [id], onDelete: Cascade)
  dishId String?
}

model Dish {
  id          String      @id @default(cuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  description String
  name        String
  price       Decimal     @db.Decimal(5, 2)
  image       DishPhoto[]

  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String
  chef      Chef    @relation(fields: [chefId], references: [id], onDelete: Cascade)
  chefId    String

  @@unique([name, chefId])
}

enum OrderStatus {
  PENDING
  ACCEPTED
  COMPLETED
  DECLINED
}

model OrderItems {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model Order {
  id                 String      @id @default(cuid())
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  amount             Int
  confirmationNumber String      @unique
  paymentMethodId    String
  address1           String
  address2           String?
  city               String
  state              String
  zipcode            String
  eventDate          DateTime
  eventTime          String
  orderStatus        OrderStatus @default(PENDING)

  user   AuthUser     @relation(fields: [userId], references: [id])
  userId String
  chef   Chef         @relation(fields: [chefId], references: [id])
  chefId String
  items  OrderItems[]
}
