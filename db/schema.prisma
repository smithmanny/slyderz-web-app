// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// --------------------------------------

enum RoleType {
  ADMIN
  CHEF
  USER
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  firstName      String
  lastName       String
  email          String   @unique
  hashedPassword String?
  stripeCustomerId String
  role           RoleType   @default(USER)

  tokens   Token[]
  sessions Session[]
  chef     Chef?
  orders   Order[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

enum TokenType {
  RESET_PASSWORD
}

// Chef section
model Chef {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId Int
  dishes Dish[]

  @@unique([userId])
}

model Order {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  confirmationNumber String   @unique
  orderConfirmed     Boolean  @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId Int
  dishes Dish[]
}

model Section {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  dishes    Dish[]
}

model Dish {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String
  name        String   @unique
  price       Int

  chef      Chef    @relation(fields: [chefId], references: [id])
  chefId    Int
  section   Section @relation(fields: [sectionId], references: [id])
  sectionId Int
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   Int?
}
