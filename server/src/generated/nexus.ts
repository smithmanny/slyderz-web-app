/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */





declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
  Role: "ADMIN" | "CHEF" | "USER"
}

export interface NexusGenRootTypes {
  AuthPayload: { // root type
    user: NexusGenRootTypes['User']; // User!
  }
  CurrentSessionPayload: { // root type
    user?: NexusGenRootTypes['User'] | null; // User
  }
  MessagePayload: { // root type
    message: string; // String!
  }
  Mutation: {};
  Query: {};
  User: { // root type
    address1?: string | null; // String
    address2?: string | null; // String
    avatarUrl?: string | null; // String
    city?: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    postalCode?: number | null; // Int
    resetToken?: string | null; // String
    resetTokenExpiry?: number | null; // Float
    role: NexusGenEnums['Role']; // Role!
    state?: string | null; // String
  }
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  Role: NexusGenEnums['Role'];
}

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    user: NexusGenRootTypes['User']; // User!
  }
  CurrentSessionPayload: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  MessagePayload: { // field return type
    message: string; // String!
  }
  Mutation: { // field return type
    login: NexusGenRootTypes['AuthPayload']; // AuthPayload!
    signout: NexusGenRootTypes['MessagePayload']; // MessagePayload!
    signup: NexusGenRootTypes['AuthPayload']; // AuthPayload!
  }
  Query: { // field return type
    currentSession: NexusGenRootTypes['CurrentSessionPayload'] | null; // CurrentSessionPayload
    me: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    address1: string | null; // String
    address2: string | null; // String
    avatarUrl: string | null; // String
    city: string | null; // String
    email: string; // String!
    firstName: string; // String!
    id: number; // Int!
    lastName: string; // String!
    postalCode: number | null; // Int
    resetToken: string | null; // String
    resetTokenExpiry: number | null; // Float
    role: NexusGenEnums['Role']; // Role!
    state: string | null; // String
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    login: { // args
      email?: string | null; // String
      password?: string | null; // String
    }
    signup: { // args
      email?: string | null; // String
      firstName: string; // String!
      lastName: string; // String!
      password?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "AuthPayload" | "CurrentSessionPayload" | "MessagePayload" | "Mutation" | "Post" | "Query" | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = "Role";

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}